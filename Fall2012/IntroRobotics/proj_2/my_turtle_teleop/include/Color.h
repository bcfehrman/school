/* Auto-generated by genmsg_cpp for file /builddir/build/BUILDROOT/ros-electric-ros-tutorials-0.2.6-s1344784994.fc17.x86_64/opt/ros/electric/stacks/ros_tutorials/turtlesim/msg/Color.msg */
#ifndef TURTLESIM_MESSAGE_COLOR_H
#define TURTLESIM_MESSAGE_COLOR_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace turtlesim
{
template <class ContainerAllocator>
struct Color_ {
  typedef Color_<ContainerAllocator> Type;

  Color_()
  : r(0)
  , g(0)
  , b(0)
  {
  }

  Color_(const ContainerAllocator& _alloc)
  : r(0)
  , g(0)
  , b(0)
  {
  }

  typedef uint8_t _r_type;
  uint8_t r;

  typedef uint8_t _g_type;
  uint8_t g;

  typedef uint8_t _b_type;
  uint8_t b;


private:
  static const char* __s_getDataType_() { return "turtlesim/Color"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "353891e354491c51aabe32df673fb446"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "uint8 r\n\
uint8 g\n\
uint8 b\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, r);
    ros::serialization::serialize(stream, g);
    ros::serialization::serialize(stream, b);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, r);
    ros::serialization::deserialize(stream, g);
    ros::serialization::deserialize(stream, b);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(r);
    size += ros::serialization::serializationLength(g);
    size += ros::serialization::serializationLength(b);
    return size;
  }

  typedef boost::shared_ptr< ::turtlesim::Color_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::turtlesim::Color_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Color
typedef  ::turtlesim::Color_<std::allocator<void> > Color;

typedef boost::shared_ptr< ::turtlesim::Color> ColorPtr;
typedef boost::shared_ptr< ::turtlesim::Color const> ColorConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::turtlesim::Color_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::turtlesim::Color_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace turtlesim

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::turtlesim::Color_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::turtlesim::Color_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::turtlesim::Color_<ContainerAllocator> > {
  static const char* value() 
  {
    return "353891e354491c51aabe32df673fb446";
  }

  static const char* value(const  ::turtlesim::Color_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x353891e354491c51ULL;
  static const uint64_t static_value2 = 0xaabe32df673fb446ULL;
};

template<class ContainerAllocator>
struct DataType< ::turtlesim::Color_<ContainerAllocator> > {
  static const char* value() 
  {
    return "turtlesim/Color";
  }

  static const char* value(const  ::turtlesim::Color_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::turtlesim::Color_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8 r\n\
uint8 g\n\
uint8 b\n\
\n\
";
  }

  static const char* value(const  ::turtlesim::Color_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::turtlesim::Color_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::turtlesim::Color_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.r);
    stream.next(m.g);
    stream.next(m.b);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Color_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::turtlesim::Color_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::turtlesim::Color_<ContainerAllocator> & v) 
  {
    s << indent << "r: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.r);
    s << indent << "g: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.g);
    s << indent << "b: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.b);
  }
};


} // namespace message_operations
} // namespace ros

#endif // TURTLESIM_MESSAGE_COLOR_H

